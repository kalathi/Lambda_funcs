import boto3
import csv
import json
import sys
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
import datetime
import os

ec2Obj = boto3.resource('ec2')
s3Client = boto3.client('s3')
snsclient = boto3.client('sns')
b_name='takeda-ec2-inventory'
def uploads3():
    try:
        s3Client.upload_file('/tmp/takeda_EC2_Instance_Inventory.csv', b_name, 'takeda_EC2_Instance_Inventory.csv')
        s3Client.put_object_acl(
            ACL='public-read-write',
            Bucket=b_name,
            Key='takeda_EC2_Instance_Inventory.csv'
                )
    except Exception as e:
        print str(e)
        pass
def send_mail():
    
    obj_url="https://s3-eu-west-1.amazonaws.com/takeda-ec2-inventory/takeda_EC2_Instance_Inventory.csv"
    tmp=datetime.datetime.today().strftime('%Y-%m-%d')
    msg= "Hi \r\n"+ "Please Find the Takeda EC2 Inventory Report as on "+tmp +" : " + obj_url + " \r\nThanks \r\nAuto Report Generator " 
    
    try:
        response = snsclient.publish(
                TopicArn='arn:aws:sns:eu-west-1:812809744037:Takeda_inventory_report',
                Message=msg,
                Subject='Takeda EC2 Inventory Report',
                MessageStructure='string'
                
            )
    except Exception as e:
        print str(e)
        pass
# Sending Report with attachment usng SES , cognizant outlook is blocking so commenting it .

# def sendmail():
#     SENDER = "CustomerSupportDL" #Sender Address
    
#     # Replace recipient@example.com with a "To" address. If your account 
#     # is still in the sandbox, this address must be verified.
#     RECIPIENT = "CustomerSupportDL@cognizant.com" # Receiver Address
#     #bucet_name=''#Bucket Name
#     file_name='inst_inven.csv' #file Name
#     file_path='/tmp/'+file_name
#     # Specify a configuration set. If you do not want to use a configuration
#     # set, comment the following variable, and the 
#     # ConfigurationSetName=CONFIGURATION_SET argument below.
#     #CONFIGURATION_SET = "ConfigSet"
    
#     # If necessary, replace us-west-2 with the AWS Region you're using for Amazon SES.
#     AWS_REGION = "us-east-1"
    
#     # The subject line for the email.
#     SUBJECT = "Instance Inventory"
    
#     # The full path to the file that will be attached to the email.
#     #download file from s3 
#     #s3Client.download_file(bucket_name, file_name, file_path)
#     ATTACHMENT = file_path
    
#     # The email body for recipients with non-HTML email clients.
#     BODY_TEXT = "Hello,\r\nPlease see the attached file for  Inventory for EC2 Insatnce."
    
#     # The HTML body of the email.
    
    #BODY_HTML = """\
    #<html>
    #<head></head>
    #<body>
    #<h1>Hello</h1>
    #<p>Please see the attached file for for  Inventory for EC2 Insatnce.</p>
    #</body>
    #</html>
    
    
    # # The character encoding for the email.
    # CHARSET = "utf-8"
    
    # # Create a new SES resource and specify a region.
    # client = boto3.client('ses',region_name=AWS_REGION)
    
    # # Create a multipart/mixed parent container.
    # msg = MIMEMultipart('mixed')
    # # Add subject, from and to lines.
    # msg['Subject'] = SUBJECT 
    # msg['From'] = SENDER 
    # msg['To'] = RECIPIENT
    
    # # Create a multipart/alternative child container.
    # msg_body = MIMEMultipart('alternative')
    
    # # Encode the text and HTML content and set the character encoding. This step is
    # # necessary if you're sending a message with characters outside the ASCII range.
    # textpart = MIMEText(BODY_TEXT.encode(CHARSET), 'plain', CHARSET)
    # htmlpart = MIMEText(BODY_HTML.encode(CHARSET), 'html', CHARSET)
    
    # # Add the text and HTML parts to the child container.
    # msg_body.attach(textpart)
    # msg_body.attach(htmlpart)
    
    # # Define the attachment part and encode it using MIMEApplication.
    # att = MIMEApplication(open(ATTACHMENT, 'rb').read())
    
    # # Add a header to tell the email client to treat this part as an attachment,
    # # and to give the attachment a name.
    # att.add_header('Content-Disposition','attachment',filename=os.path.basename(ATTACHMENT))
    
    # # Attach the multipart/alternative child container to the multipart/mixed
    # # parent container.
    # msg.attach(msg_body)
    
    # # Add the attachment to the parent container.
    # msg.attach(att)
    # #print(msg)
    # try:
    #     #Provide the contents of the email.
    #     response = client.send_raw_email(
    #         Source=SENDER,
    #         Destinations=[
    #             RECIPIENT
    #         ],
    #         RawMessage={
    #             'Data':msg.as_string(),
    #         }
    #         #ConfigurationSetName=CONFIGURATION_SET
    #     )
    # # Display an error if something goes wrong.	
    # except Exception as e:
    #     print(str(e))
    # else:
    #     print("Email sent! Message ID:"),
    #     print(response['MessageId'])

def lambda_handler(event, context):
    tot=0
    inst_det_key=dict()
    inst_det_val=dict()
    tag_main=['Name','Instance_id','Instance_Type','Availability_zone','Instance_state','Platform']
    try:
        
        for instance in ec2Obj.instances.all():
            #print instance.placement
            #break
            tag_key=[]
            tag_val=[]
            tot=tot+1
            id=str(instance.id)
            #print id
            tag_List = instance.tags
            try:
                for j in range(len(tag_List)):
                    tag_key.append(tag_List[j].values()[1])
                    tag_val.append(tag_List[j].values()[0])
                for k in range(len(tag_key)):
                    if tag_key[k] not in tag_main:
                        tag_main.append(tag_key[k])
                tag_key.append('Instance_id')
                tag_val.append(id)
                tag_key.append('Instance_Type')
                tag_val.append(instance.instance_type)
                tag_key.append('Availability_zone')
                tmp=instance.placement
                for k in tmp:
                    if str(k)=='AvailabilityZone':
                        tag_val.append(tmp['AvailabilityZone'])
                    
                tag_key.append('Instance_state')
                tag_val.append(instance.state['Name'])
                tag_key.append('Platform')
                if str(instance.platform) == 'windows':
                    tag_val.append('Windows')
                else:
                    tag_val.append('Linux')
                
                inst_det_key[id]=tag_key
                inst_det_val[id]=tag_val
                #print tag_val
            except Exception as e:
                print str(e)
                pass
            
    except Exception as e:
        print str(e)
        pass
    #print tag_main
    main_row=[]
    tag_main_tmp=[]
    for d in range(len(tag_main)):
        if str(tag_main[d]).lower() == 'name' and d>0:
            pass
        else:
            tag_main_tmp.append(tag_main[d])
            
    #print main_row
    main_row.append(tag_main_tmp)
    for k in inst_det_key:
        tmp_v=[]
        for p in range(len(tag_main)):
            tmp_v.append('NA')
        
        tmp_v[0]=k
        for l in range(len(inst_det_key[k])):
            tmp1=inst_det_key[k][l]
            for m in range(len(tag_main)):
                if tmp1 == tag_main[m] :
                    tmp_v[m]=inst_det_val[k][l]
            
        main_row.append(tmp_v)
    with open('/tmp/takeda_EC2_Instance_Inventory.csv', 'wb') as csv_file:
        writer = csv.writer(csv_file)
        writer.writerows(main_row)
        csv_file.close()
    uploads3()
    send_mail()